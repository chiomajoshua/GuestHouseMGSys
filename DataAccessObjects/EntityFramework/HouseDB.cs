

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "DataAccessObjects\App.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "Data Source=./;Initial Catalog=HouseDB;Persist Security Info=True;User ID=sa;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Enterprise Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DataAccessObjects.EntityFramework
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<AccessLogger> AccessLoggers { get; set; } // AccessLogger
        System.Data.Entity.DbSet<AccountCreation> AccountCreations { get; set; } // AccountCreation
        System.Data.Entity.DbSet<CustomerStatu> CustomerStatus { get; set; } // CustomerStatus
        System.Data.Entity.DbSet<PaymentInformation> PaymentInformations { get; set; } // PaymentInformation
        System.Data.Entity.DbSet<Reservation> Reservations { get; set; } // Reservation
        System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        System.Data.Entity.DbSet<Room> Rooms { get; set; } // Room
        System.Data.Entity.DbSet<RoomType> RoomTypes { get; set; } // RoomType
        System.Data.Entity.DbSet<User> Users { get; set; } // User

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<AccessLogger> AccessLoggers { get; set; } // AccessLogger
        public System.Data.Entity.DbSet<AccountCreation> AccountCreations { get; set; } // AccountCreation
        public System.Data.Entity.DbSet<CustomerStatu> CustomerStatus { get; set; } // CustomerStatus
        public System.Data.Entity.DbSet<PaymentInformation> PaymentInformations { get; set; } // PaymentInformation
        public System.Data.Entity.DbSet<Reservation> Reservations { get; set; } // Reservation
        public System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        public System.Data.Entity.DbSet<Room> Rooms { get; set; } // Room
        public System.Data.Entity.DbSet<RoomType> RoomTypes { get; set; } // RoomType
        public System.Data.Entity.DbSet<User> Users { get; set; } // User

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AccessLoggerConfiguration());
            modelBuilder.Configurations.Add(new AccountCreationConfiguration());
            modelBuilder.Configurations.Add(new CustomerStatuConfiguration());
            modelBuilder.Configurations.Add(new PaymentInformationConfiguration());
            modelBuilder.Configurations.Add(new ReservationConfiguration());
            modelBuilder.Configurations.Add(new RoleConfiguration());
            modelBuilder.Configurations.Add(new RoomConfiguration());
            modelBuilder.Configurations.Add(new RoomTypeConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AccessLoggerConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountCreationConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new PaymentInformationConfiguration(schema));
            modelBuilder.Configurations.Add(new ReservationConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new RoomConfiguration(schema));
            modelBuilder.Configurations.Add(new RoomTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class MyDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<AccessLogger> AccessLoggers { get; set; }
        public System.Data.Entity.DbSet<AccountCreation> AccountCreations { get; set; }
        public System.Data.Entity.DbSet<CustomerStatu> CustomerStatus { get; set; }
        public System.Data.Entity.DbSet<PaymentInformation> PaymentInformations { get; set; }
        public System.Data.Entity.DbSet<Reservation> Reservations { get; set; }
        public System.Data.Entity.DbSet<Role> Roles { get; set; }
        public System.Data.Entity.DbSet<Room> Rooms { get; set; }
        public System.Data.Entity.DbSet<RoomType> RoomTypes { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }

        public FakeMyDbContext()
        {
            AccessLoggers = new FakeDbSet<AccessLogger>("Alid");
            AccountCreations = new FakeDbSet<AccountCreation>("Acid");
            CustomerStatus = new FakeDbSet<CustomerStatu>("Csid");
            PaymentInformations = new FakeDbSet<PaymentInformation>("PayId");
            Reservations = new FakeDbSet<Reservation>("RsCode");
            Roles = new FakeDbSet<Role>("RoleId");
            Rooms = new FakeDbSet<Room>("Rmid");
            RoomTypes = new FakeDbSet<RoomType>("Rtid");
            Users = new FakeDbSet<User>("UserId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // AccessLogger
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AccessLogger
    {
        public int Alid { get; set; } // ALID (Primary key)
        public int UserId { get; set; } // UserID
        public bool Active { get; set; } // Active
        public System.DateTime LastSeen { get; set; } // LastSeen

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [AccessLogger].([UserId]) (FK_AccessLogger_User)
        /// </summary>
        public virtual User User { get; set; } // FK_AccessLogger_User
    }

    // AccountCreation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AccountCreation
    {
        public int Acid { get; set; } // ACID (Primary key)
        public int UserId { get; set; } // UserID
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [AccountCreation].([UserId]) (FK_AccountCreation_User)
        /// </summary>
        public virtual User User { get; set; } // FK_AccountCreation_User
    }

    // CustomerStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CustomerStatu
    {
        public int Csid { get; set; } // CSID (Primary key)
        public string RsCode { get; set; } // RSCode (length: 10)
        public bool CsStatus { get; set; } // CSStatus
        public System.DateTime CsDate { get; set; } // CSDate

        // Foreign keys

        /// <summary>
        /// Parent Reservation pointed by [CustomerStatus].([RsCode]) (FK_CustomerStatus_Reservation)
        /// </summary>
        public virtual Reservation Reservation { get; set; } // FK_CustomerStatus_Reservation
    }

    // PaymentInformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PaymentInformation
    {
        public int PayId { get; set; } // PayID (Primary key)
        public string RsCode { get; set; } // RSCode (length: 10)
        public int PiAmountPayable { get; set; } // PIAmountPayable
        public int PiAmountPayed { get; set; } // PIAmountPayed

        // Foreign keys

        /// <summary>
        /// Parent Reservation pointed by [PaymentInformation].([RsCode]) (FK_PaymentInformation_Reservation)
        /// </summary>
        public virtual Reservation Reservation { get; set; } // FK_PaymentInformation_Reservation
    }

    // Reservation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Reservation
    {
        public int Rsid { get; set; } // RSID
        public string RsCode { get; set; } // RSCode (Primary key) (length: 10)
        public string RsFirstname { get; set; } // RSFirstname
        public string RsMiddlename { get; set; } // RSMiddlename
        public string RsLastname { get; set; } // RSLastname
        public string RsGender { get; set; } // RSGender (length: 10)
        public int RsPhone { get; set; } // RSPhone
        public string RsAddress { get; set; } // RSAddress
        public string RsState { get; set; } // RSState (length: 50)
        public string RsCountry { get; set; } // RSCountry (length: 50)
        public System.DateTime RsArrivalDate { get; set; } // RSArrivalDate
        public System.DateTime RsDepartureDate { get; set; } // RSDepartureDate
        public int RsDiscount { get; set; } // RSDiscount
        public System.DateTime RsDate { get; set; } // RSDate
        public string RsMarital { get; set; } // RSMarital (length: 50)
        public bool RsTreated { get; set; } // RSTreated
        public int Rtid { get; set; } // RTID
        public int RsTotalRooms { get; set; } // RSTotalRooms

        // Reverse navigation

        /// <summary>
        /// Child CustomerStatus where [CustomerStatus].[RSCode] point to this entity (FK_CustomerStatus_Reservation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CustomerStatu> CustomerStatus { get; set; } // CustomerStatus.FK_CustomerStatus_Reservation
        /// <summary>
        /// Child PaymentInformations where [PaymentInformation].[RSCode] point to this entity (FK_PaymentInformation_Reservation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PaymentInformation> PaymentInformations { get; set; } // PaymentInformation.FK_PaymentInformation_Reservation

        // Foreign keys

        /// <summary>
        /// Parent RoomType pointed by [Reservation].([Rtid]) (FK_Reservation_RoomType)
        /// </summary>
        public virtual RoomType RoomType { get; set; } // FK_Reservation_RoomType

        public Reservation()
        {
            PaymentInformations = new System.Collections.Generic.List<PaymentInformation>();
            CustomerStatus = new System.Collections.Generic.List<CustomerStatu>();
        }
    }

    // Role
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Role
    {
        public int RoleId { get; set; } // RoleID (Primary key)
        public string RoleName { get; set; } // RoleName (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Users where [User].[RoleID] point to this entity (FK_User_Role)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<User> Users { get; set; } // User.FK_User_Role

        public Role()
        {
            Users = new System.Collections.Generic.List<User>();
        }
    }

    // Room
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Room
    {
        public int Rmid { get; set; } // RMID (Primary key)
        public int Rtid { get; set; } // RTID
        public int RmNumber { get; set; } // RMNumber
        public bool RmCondition { get; set; } // RMCondition
        public string RmAlias { get; set; } // RMAlias (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent RoomType pointed by [Room].([Rtid]) (FK_Room_RoomType)
        /// </summary>
        public virtual RoomType RoomType { get; set; } // FK_Room_RoomType
    }

    // RoomType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class RoomType
    {
        public int Rtid { get; set; } // RTID (Primary key)
        public string RtName { get; set; } // RTName (length: 50)
        public decimal RtPrice { get; set; } // RTPrice
        public string RtDescription { get; set; } // RTDescription (length: 2147483647)

        // Reverse navigation

        /// <summary>
        /// Child Reservations where [Reservation].[RTID] point to this entity (FK_Reservation_RoomType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Reservation> Reservations { get; set; } // Reservation.FK_Reservation_RoomType
        /// <summary>
        /// Child Rooms where [Room].[RTID] point to this entity (FK_Room_RoomType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Room> Rooms { get; set; } // Room.FK_Room_RoomType

        public RoomType()
        {
            Rooms = new System.Collections.Generic.List<Room>();
            Reservations = new System.Collections.Generic.List<Reservation>();
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class User
    {
        public int UserId { get; set; } // UserID (Primary key)
        public string Password { get; set; } // Password
        public int RoleId { get; set; } // RoleID
        public bool Status { get; set; } // Status

        // Reverse navigation

        /// <summary>
        /// Child AccessLoggers where [AccessLogger].[UserID] point to this entity (FK_AccessLogger_User)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccessLogger> AccessLoggers { get; set; } // AccessLogger.FK_AccessLogger_User
        /// <summary>
        /// Child AccountCreations where [AccountCreation].[UserID] point to this entity (FK_AccountCreation_User)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountCreation> AccountCreations { get; set; } // AccountCreation.FK_AccountCreation_User

        // Foreign keys

        /// <summary>
        /// Parent Role pointed by [User].([RoleId]) (FK_User_Role)
        /// </summary>
        public virtual Role Role { get; set; } // FK_User_Role

        public User()
        {
            AccountCreations = new System.Collections.Generic.List<AccountCreation>();
            AccessLoggers = new System.Collections.Generic.List<AccessLogger>();
        }
    }

    #endregion

    #region POCO Configuration

    // AccessLogger
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AccessLoggerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccessLogger>
    {
        public AccessLoggerConfiguration()
            : this("dbo")
        {
        }

        public AccessLoggerConfiguration(string schema)
        {
            ToTable("AccessLogger", schema);
            HasKey(x => x.Alid);

            Property(x => x.Alid).HasColumnName(@"ALID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.LastSeen).HasColumnName(@"LastSeen").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.User).WithMany(b => b.AccessLoggers).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_AccessLogger_User
        }
    }

    // AccountCreation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AccountCreationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountCreation>
    {
        public AccountCreationConfiguration()
            : this("dbo")
        {
        }

        public AccountCreationConfiguration(string schema)
        {
            ToTable("AccountCreation", schema);
            HasKey(x => x.Acid);

            Property(x => x.Acid).HasColumnName(@"ACID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.User).WithMany(b => b.AccountCreations).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_AccountCreation_User
        }
    }

    // CustomerStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CustomerStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CustomerStatu>
    {
        public CustomerStatuConfiguration()
            : this("dbo")
        {
        }

        public CustomerStatuConfiguration(string schema)
        {
            ToTable("CustomerStatus", schema);
            HasKey(x => x.Csid);

            Property(x => x.Csid).HasColumnName(@"CSID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RsCode).HasColumnName(@"RSCode").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(10);
            Property(x => x.CsStatus).HasColumnName(@"CSStatus").HasColumnType("bit").IsRequired();
            Property(x => x.CsDate).HasColumnName(@"CSDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Reservation).WithMany(b => b.CustomerStatus).HasForeignKey(c => c.RsCode).WillCascadeOnDelete(false); // FK_CustomerStatus_Reservation
        }
    }

    // PaymentInformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PaymentInformationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PaymentInformation>
    {
        public PaymentInformationConfiguration()
            : this("dbo")
        {
        }

        public PaymentInformationConfiguration(string schema)
        {
            ToTable("PaymentInformation", schema);
            HasKey(x => x.PayId);

            Property(x => x.PayId).HasColumnName(@"PayID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RsCode).HasColumnName(@"RSCode").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(10);
            Property(x => x.PiAmountPayable).HasColumnName(@"PIAmountPayable").HasColumnType("int").IsRequired();
            Property(x => x.PiAmountPayed).HasColumnName(@"PIAmountPayed").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Reservation).WithMany(b => b.PaymentInformations).HasForeignKey(c => c.RsCode).WillCascadeOnDelete(false); // FK_PaymentInformation_Reservation
        }
    }

    // Reservation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ReservationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Reservation>
    {
        public ReservationConfiguration()
            : this("dbo")
        {
        }

        public ReservationConfiguration(string schema)
        {
            ToTable("Reservation", schema);
            HasKey(x => x.RsCode);

            Property(x => x.Rsid).HasColumnName(@"RSID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RsCode).HasColumnName(@"RSCode").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RsFirstname).HasColumnName(@"RSFirstname").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.RsMiddlename).HasColumnName(@"RSMiddlename").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.RsLastname).HasColumnName(@"RSLastname").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.RsGender).HasColumnName(@"RSGender").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(10);
            Property(x => x.RsPhone).HasColumnName(@"RSPhone").HasColumnType("int").IsRequired();
            Property(x => x.RsAddress).HasColumnName(@"RSAddress").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.RsState).HasColumnName(@"RSState").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RsCountry).HasColumnName(@"RSCountry").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RsArrivalDate).HasColumnName(@"RSArrivalDate").HasColumnType("date").IsRequired();
            Property(x => x.RsDepartureDate).HasColumnName(@"RSDepartureDate").HasColumnType("date").IsRequired();
            Property(x => x.RsDiscount).HasColumnName(@"RSDiscount").HasColumnType("int").IsRequired();
            Property(x => x.RsDate).HasColumnName(@"RSDate").HasColumnType("datetime").IsRequired();
            Property(x => x.RsMarital).HasColumnName(@"RSMarital").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RsTreated).HasColumnName(@"RSTreated").HasColumnType("bit").IsRequired();
            Property(x => x.Rtid).HasColumnName(@"RTID").HasColumnType("int").IsRequired();
            Property(x => x.RsTotalRooms).HasColumnName(@"RSTotalRooms").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.RoomType).WithMany(b => b.Reservations).HasForeignKey(c => c.Rtid).WillCascadeOnDelete(false); // FK_Reservation_RoomType
        }
    }

    // Role
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class RoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Role>
    {
        public RoleConfiguration()
            : this("dbo")
        {
        }

        public RoleConfiguration(string schema)
        {
            ToTable("Role", schema);
            HasKey(x => x.RoleId);

            Property(x => x.RoleId).HasColumnName(@"RoleID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
        }
    }

    // Room
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class RoomConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Room>
    {
        public RoomConfiguration()
            : this("dbo")
        {
        }

        public RoomConfiguration(string schema)
        {
            ToTable("Room", schema);
            HasKey(x => x.Rmid);

            Property(x => x.Rmid).HasColumnName(@"RMID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Rtid).HasColumnName(@"RTID").HasColumnType("int").IsRequired();
            Property(x => x.RmNumber).HasColumnName(@"RMNumber").HasColumnType("int").IsRequired();
            Property(x => x.RmCondition).HasColumnName(@"RMCondition").HasColumnType("bit").IsRequired();
            Property(x => x.RmAlias).HasColumnName(@"RMAlias").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(10);

            // Foreign keys
            HasRequired(a => a.RoomType).WithMany(b => b.Rooms).HasForeignKey(c => c.Rtid).WillCascadeOnDelete(false); // FK_Room_RoomType
        }
    }

    // RoomType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class RoomTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RoomType>
    {
        public RoomTypeConfiguration()
            : this("dbo")
        {
        }

        public RoomTypeConfiguration(string schema)
        {
            ToTable("RoomType", schema);
            HasKey(x => x.Rtid);

            Property(x => x.Rtid).HasColumnName(@"RTID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RtName).HasColumnName(@"RTName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RtPrice).HasColumnName(@"RTPrice").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.RtDescription).HasColumnName(@"RTDescription").HasColumnType("text").IsRequired().IsUnicode(false).HasMaxLength(2147483647);
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.RoleId).HasColumnName(@"RoleID").HasColumnType("int").IsRequired();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.Role).WithMany(b => b.Users).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_User_Role
        }
    }

    #endregion

}
// </auto-generated>

